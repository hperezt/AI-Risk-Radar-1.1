# app/risk_engine.py

import os
import json
import openai
from dotenv import load_dotenv

# ------------------------------------------------
# Cargar variables de entorno (.env en local, Render en producci√≥n)
# ------------------------------------------------
load_dotenv()

# Configuraci√≥n de modelo y API
MODEL_NAME = os.getenv("MODEL_NAME", "gpt-4o-mini")   # Modelo por defecto si no est√° definido
API_KEY = os.getenv("OPENAI_API_KEY")                 # Clave de OpenAI
USE_MOCK = False                                      # Modo simulado para pruebas offline

if not API_KEY:
    raise RuntimeError("OPENAI_API_KEY no est√° definida. A√±√°dela en .env o en Render > Environment")

# Configurar API Key (cliente viejo <=0.28.0)
openai.api_key = API_KEY


def generate_risks(text: str, context: str = "", lang: str = "es") -> dict:
    """
    Genera riesgos a partir de un fragmento de documento usando GPT.
    Devuelve un JSON con dos listas: intuitive_risks y counterintuitive_risks.
    """

    if USE_MOCK:
        # üîÑ Modo simulado para pruebas locales
        return {
            "intuitive_risks": [
                {
                    "risk": "Retraso por clima",
                    "justification": "Condiciones adversas",
                    "countermeasure": "Plan de contingencia",
                    "page": 1,
                    "evidence": "Clima en zona de obra",
                }
            ],
            "counterintuitive_risks": [
                {
                    "risk": "Exceso de presupuesto por ahorro mal planificado",
                    "justification": "Decisiones apresuradas",
                    "countermeasure": "Revisi√≥n independiente",
                    "page": 2,
                    "evidence": "Reportes financieros",
                }
            ],
        }

    # üß† Prompt interdisciplinario optimizado para long doc
    prompt = f"""
Comentario: Este es un ejercicio de an√°lisis asistido por inteligencia artificial. 
El objetivo es evaluar c√≥mo un modelo LLM puede colaborar con expertos humanos para 
identificar riesgos relevantes en proyectos ferroviarios en Alemania. 
La calidad, claridad y solidez del razonamiento es m√°s importante que la cantidad de resultados.

Act√∫as como un comit√© interdisciplinario compuesto por:
- Ingenieros especializados en planificaci√≥n y ejecuci√≥n de proyectos de infraestructura ferroviaria en Europa.
- Abogados expertos en derecho de infraestructura y normativa aplicable en Alemania.
- Consultores y analistas con experiencia en evaluaci√≥n de riesgos en el sector ferroviario alem√°n.

Piensa como si estos perfiles discutieran en conjunto cada riesgo y llegaran a un consenso argumentado.

Tu tarea es leer un FRAGMENTO de un documento t√©cnico (no todo el documento completo) 
y detectar riesgos de planificaci√≥n que puedan generar retrasos, sobrecostos, 
conflictos contractuales o fallas operativas relevantes.

Instrucciones:
- Clasifica los riesgos en dos listas: "intuitive_risks" y "counterintuitive_risks".
- Cada lista puede tener de 0 hasta N riesgos (no inventes ni repitas riesgos gen√©ricos, no limites el n√∫mero de riesgos).
- Identifica TODOS los riesgos relevantes, aunque sean m√°s de 10. No pares despu√©s de 10. Si encuentras 30 o m√°s, devu√©lvelos todos.
- Considera como riesgo lo que afecte TIEMPO, COSTO, EJECUCI√ìN, SEGURIDAD o ACEPTACI√ìN SOCIAL/REGULATORIA.
- Por cada riesgo incluye:
  - "risk": enunciado breve
  - "justification": explicaci√≥n clara desde la perspectiva interdisciplinaria
  - "countermeasure": propuesta de mitigaci√≥n
  - "page": n√∫mero de p√°gina o secci√≥n si es posible inferirlo
  - "evidence": extracto textual breve que fundamenta el riesgo

Texto analizado:
{text[:16000]}

Contexto adicional (si existe):
{context}

Devuelve √∫nicamente un JSON v√°lido con exactamente dos listas:
{{
  "intuitive_risks": [{...}, {...}, {...}, {...}, {...}, {...}, {...}],
  "counterintuitive_risks": [{...}, {...}, {...}, {...}]
}}
"""

    response = openai.ChatCompletion.create(
        model=MODEL_NAME,
        messages=[
            {
                "role": "system",
                "content": (
                    "Eres un comit√© interdisciplinario de expertos (ingenier√≠a civil y ferroviaria, "
                    "abogados en normativa alemana, compras y log√≠stica) que analiza riesgos en proyectos de infraestructura."
                ),
            },
            {"role": "user", "content": prompt},
        ],
        temperature=0.3,
        max_tokens=6000,
    )

    try:
        data = json.loads(response["choices"][0]["message"]["content"])
    except Exception as e:
        raise RuntimeError(f"No se pudo parsear JSON: {e}")

    return data

